// <auto-generated />
using System;
using Calculator.Shared.EntityFramework.Configs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Calculator.Shared.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240128155234_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Calculator.Shared.EntityFramework.Entities.TaxEntities.CalculatedTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountOfDay")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MonetaryUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CalculatedTax");
                });

            modelBuilder.Entity("Calculator.Shared.EntityFramework.Entities.TaxEntities.TaxRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("MonetaryUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaxRule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Gothenburg",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6406),
                            EndTime = new TimeOnly(6, 29, 0),
                            MonetaryUnit = "SEK",
                            StartTime = new TimeOnly(6, 0, 0),
                            TaxAmount = 8m,
                            UpdatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6427)
                        },
                        new
                        {
                            Id = 2,
                            City = "Gothenburg",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6436),
                            EndTime = new TimeOnly(6, 59, 0),
                            MonetaryUnit = "SEK",
                            StartTime = new TimeOnly(6, 30, 0),
                            TaxAmount = 13m,
                            UpdatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6437)
                        },
                        new
                        {
                            Id = 3,
                            City = "Gothenburg",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6441),
                            EndTime = new TimeOnly(7, 59, 0),
                            MonetaryUnit = "SEK",
                            StartTime = new TimeOnly(7, 0, 0),
                            TaxAmount = 18m,
                            UpdatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6442)
                        },
                        new
                        {
                            Id = 4,
                            City = "Gothenburg",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6446),
                            EndTime = new TimeOnly(8, 29, 0),
                            MonetaryUnit = "SEK",
                            StartTime = new TimeOnly(8, 0, 0),
                            TaxAmount = 13m,
                            UpdatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6447)
                        },
                        new
                        {
                            Id = 5,
                            City = "Gothenburg",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6450),
                            EndTime = new TimeOnly(14, 59, 0),
                            MonetaryUnit = "SEK",
                            StartTime = new TimeOnly(8, 30, 0),
                            TaxAmount = 8m,
                            UpdatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6451)
                        },
                        new
                        {
                            Id = 6,
                            City = "Gothenburg",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6459),
                            EndTime = new TimeOnly(15, 29, 0),
                            MonetaryUnit = "SEK",
                            StartTime = new TimeOnly(15, 0, 0),
                            TaxAmount = 13m,
                            UpdatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6460)
                        },
                        new
                        {
                            Id = 7,
                            City = "Gothenburg",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6591),
                            EndTime = new TimeOnly(16, 59, 0),
                            MonetaryUnit = "SEK",
                            StartTime = new TimeOnly(15, 30, 0),
                            TaxAmount = 18m,
                            UpdatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6593)
                        },
                        new
                        {
                            Id = 8,
                            City = "Gothenburg",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6597),
                            EndTime = new TimeOnly(17, 59, 0),
                            MonetaryUnit = "SEK",
                            StartTime = new TimeOnly(17, 0, 0),
                            TaxAmount = 13m,
                            UpdatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6598)
                        },
                        new
                        {
                            Id = 9,
                            City = "Gothenburg",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6601),
                            EndTime = new TimeOnly(18, 29, 0),
                            MonetaryUnit = "SEK",
                            StartTime = new TimeOnly(18, 0, 0),
                            TaxAmount = 8m,
                            UpdatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6603)
                        },
                        new
                        {
                            Id = 10,
                            City = "Gothenburg",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6612),
                            EndTime = new TimeOnly(5, 59, 0),
                            MonetaryUnit = "SEK",
                            StartTime = new TimeOnly(18, 30, 0),
                            TaxAmount = 0m,
                            UpdatedAt = new DateTime(2024, 1, 28, 19, 22, 34, 231, DateTimeKind.Local).AddTicks(6613)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
